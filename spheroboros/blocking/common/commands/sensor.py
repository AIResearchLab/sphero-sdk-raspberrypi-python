#!/usr/bin/env python3
# This file is automatically generated!
# Source File:        0x18-sensors.json
# Device ID:          0x18
# Device Name:        sensor
# Timestamp:          02/08/2019 @ 17:14:09.067588 (UTC)

from spheroboros.common.commands.sensor import CommandsEnum
from spheroboros.common.devices import DevicesEnum
from spheroboros.common.parameter import Parameter


def set_sensor_streaming_mask(self, interval, packet_count, data_mask, target, timeout=None):
    return self._dal.send_command(
        DevicesEnum.sensor,
        CommandsEnum.set_sensor_streaming_mask,
        target,
        timeout,
        inputs=[
            Parameter(
                name='interval',
                data_type='uint16_t',
                index=0,
                value=interval,
                size=1
            ),
            Parameter(
                name='packet_count',
                data_type='uint8_t',
                index=1,
                value=packet_count,
                size=1
            ),
            Parameter(
                name='data_mask',
                data_type='uint32_t',
                index=2,
                value=data_mask,
                size=1
            ),
        ],
    )


def get_sensor_streaming_mask(self, target, timeout=None):
    return self._dal.send_command(
        DevicesEnum.sensor,
        CommandsEnum.get_sensor_streaming_mask,
        target,
        timeout,
        outputs=[
            Parameter(
                name='interval',
                data_type='uint16_t',
                index=0,
                size=1,
            ),
            Parameter(
                name='packet_count',
                data_type='uint8_t',
                index=1,
                size=1,
            ),
            Parameter(
                name='data_mask',
                data_type='uint32_t',
                index=2,
                size=1,
            ),
        ],
    )


def on_sensor_streaming_data_notify(self, target, handler=None, timeout=None):
    self._dal.on_command(
        DevicesEnum.sensor,
        CommandsEnum.sensor_streaming_data_notify,
        target,
        handler,
        timeout,
        outputs=[
            Parameter(
                name='sensor_data',
                data_type='float',
                index=0,
                size=255
            ),
        ],
    )


def get_encoder_counts(self, target, timeout=None):
    return self._dal.send_command(
        DevicesEnum.sensor,
        CommandsEnum.get_encoder_counts,
        target,
        timeout,
        outputs=[
            Parameter(
                name='encoder_counts',
                data_type='int16_t',
                index=0,
                size=2,
            ),
        ],
    )


def get_euler_angles(self, target, timeout=None):
    return self._dal.send_command(
        DevicesEnum.sensor,
        CommandsEnum.get_euler_angles,
        target,
        timeout,
        outputs=[
            Parameter(
                name='pitch',
                data_type='float',
                index=0,
                size=1,
            ),
            Parameter(
                name='roll',
                data_type='float',
                index=1,
                size=1,
            ),
            Parameter(
                name='extended_roll',
                data_type='float',
                index=2,
                size=1,
            ),
            Parameter(
                name='yaw',
                data_type='float',
                index=3,
                size=1,
            ),
        ],
    )


def get_gyro_degrees_per_second(self, target, timeout=None):
    return self._dal.send_command(
        DevicesEnum.sensor,
        CommandsEnum.get_gyro_degrees_per_second,
        target,
        timeout,
        outputs=[
            Parameter(
                name='pitch',
                data_type='float',
                index=0,
                size=1,
            ),
            Parameter(
                name='roll',
                data_type='float',
                index=1,
                size=1,
            ),
            Parameter(
                name='yaw',
                data_type='float',
                index=2,
                size=1,
            ),
        ],
    )


def set_extended_sensor_streaming_mask(self, data_mask, target, timeout=None):
    return self._dal.send_command(
        DevicesEnum.sensor,
        CommandsEnum.set_extended_sensor_streaming_mask,
        target,
        timeout,
        inputs=[
            Parameter(
                name='data_mask',
                data_type='uint32_t',
                index=0,
                value=data_mask,
                size=1
            ),
        ],
    )


def get_extended_sensor_streaming_mask(self, target, timeout=None):
    return self._dal.send_command(
        DevicesEnum.sensor,
        CommandsEnum.get_extended_sensor_streaming_mask,
        target,
        timeout,
        outputs=[
            Parameter(
                name='data_mask',
                data_type='uint32_t',
                index=0,
                size=1,
            ),
        ],
    )


def get_rightsideupness(self, target, timeout=None):
    return self._dal.send_command(
        DevicesEnum.sensor,
        CommandsEnum.get_rightsideupness,
        target,
        timeout,
        outputs=[
            Parameter(
                name='rightsideupness',
                data_type='int8_t',
                index=0,
                size=1,
            ),
        ],
    )


def enable_gyro_max_notify(self, is_enabled, target, timeout=None):
    return self._dal.send_command(
        DevicesEnum.sensor,
        CommandsEnum.enable_gyro_max_notify,
        target,
        timeout,
        inputs=[
            Parameter(
                name='is_enabled',
                data_type='bool',
                index=0,
                value=is_enabled,
                size=1
            ),
        ],
    )


def on_gyro_max_notify(self, target, handler=None, timeout=None):
    self._dal.on_command(
        DevicesEnum.sensor,
        CommandsEnum.gyro_max_notify,
        target,
        handler,
        timeout,
        outputs=[
            Parameter(
                name='flags',
                data_type='uint8_t',
                index=0,
                size=1
            ),
        ],
    )


def get_bot_to_bot_infrared_readings(self, target, timeout=None):
    return self._dal.send_command(
        DevicesEnum.sensor,
        CommandsEnum.get_bot_to_bot_infrared_readings,
        target,
        timeout,
        outputs=[
            Parameter(
                name='sensor_data',
                data_type='uint32_t',
                index=0,
                size=1,
            ),
        ],
    )


def magnetometer_calibrate_to_north(self, target, timeout=None):
    return self._dal.send_command(
        DevicesEnum.sensor,
        CommandsEnum.magnetometer_calibrate_to_north,
        target,
        timeout,
    )


def on_magnetometer_north_yaw_notify(self, target, handler=None, timeout=None):
    self._dal.on_command(
        DevicesEnum.sensor,
        CommandsEnum.magnetometer_north_yaw_notify,
        target,
        handler,
        timeout,
        outputs=[
            Parameter(
                name='yaw_direction',
                data_type='uint16_t',
                index=0,
                size=1
            ),
        ],
    )


def start_robot_to_robot_infrared_broadcasting(self, far_code, near_code, target, timeout=None):
    return self._dal.send_command(
        DevicesEnum.sensor,
        CommandsEnum.start_robot_to_robot_infrared_broadcasting,
        target,
        timeout,
        inputs=[
            Parameter(
                name='far_code',
                data_type='uint8_t',
                index=0,
                value=far_code,
                size=1
            ),
            Parameter(
                name='near_code',
                data_type='uint8_t',
                index=1,
                value=near_code,
                size=1
            ),
        ],
    )


def start_robot_to_robot_infrared_following(self, far_code, near_code, target, timeout=None):
    return self._dal.send_command(
        DevicesEnum.sensor,
        CommandsEnum.start_robot_to_robot_infrared_following,
        target,
        timeout,
        inputs=[
            Parameter(
                name='far_code',
                data_type='uint8_t',
                index=0,
                value=far_code,
                size=1
            ),
            Parameter(
                name='near_code',
                data_type='uint8_t',
                index=1,
                value=near_code,
                size=1
            ),
        ],
    )


def stop_robot_to_robot_infrared_broadcasting(self, target, timeout=None):
    return self._dal.send_command(
        DevicesEnum.sensor,
        CommandsEnum.stop_robot_to_robot_infrared_broadcasting,
        target,
        timeout,
    )


def send_robot_to_robot_infrared_message(self, infrared_code, front_left_strength, front_right_strength, back_right_strength, back_left_strength, target, timeout=None):
    return self._dal.send_command(
        DevicesEnum.sensor,
        CommandsEnum.send_robot_to_robot_infrared_message,
        target,
        timeout,
        inputs=[
            Parameter(
                name='infrared_code',
                data_type='uint8_t',
                index=0,
                value=infrared_code,
                size=1
            ),
            Parameter(
                name='front_left_strength',
                data_type='uint8_t',
                index=1,
                value=front_left_strength,
                size=1
            ),
            Parameter(
                name='front_right_strength',
                data_type='uint8_t',
                index=2,
                value=front_right_strength,
                size=1
            ),
            Parameter(
                name='back_right_strength',
                data_type='uint8_t',
                index=3,
                value=back_right_strength,
                size=1
            ),
            Parameter(
                name='back_left_strength',
                data_type='uint8_t',
                index=4,
                value=back_left_strength,
                size=1
            ),
        ],
    )


def listen_for_robot_to_robot_infrared_message(self, infrared_code, listen_duration, target, timeout=None):
    return self._dal.send_command(
        DevicesEnum.sensor,
        CommandsEnum.listen_for_robot_to_robot_infrared_message,
        target,
        timeout,
        inputs=[
            Parameter(
                name='infrared_code',
                data_type='uint8_t',
                index=0,
                value=infrared_code,
                size=1
            ),
            Parameter(
                name='listen_duration',
                data_type='uint32_t',
                index=1,
                value=listen_duration,
                size=1
            ),
        ],
    )


def on_robot_to_robot_infrared_message_received_notify(self, target, handler=None, timeout=None):
    self._dal.on_command(
        DevicesEnum.sensor,
        CommandsEnum.robot_to_robot_infrared_message_received_notify,
        target,
        handler,
        timeout,
        outputs=[
            Parameter(
                name='infrared_code',
                data_type='uint8_t',
                index=0,
                size=1
            ),
        ],
    )


def get_magnetometer_chip_id(self, target, timeout=None):
    return self._dal.send_command(
        DevicesEnum.sensor,
        CommandsEnum.get_magnetometer_chip_id,
        target,
        timeout,
        outputs=[
            Parameter(
                name='chip_id',
                data_type='uint8_t',
                index=0,
                size=1,
            ),
        ],
    )


def run_infrared_self_test(self, target, timeout=None):
    return self._dal.send_command(
        DevicesEnum.sensor,
        CommandsEnum.run_infrared_self_test,
        target,
        timeout,
    )


def on_infrared_self_test_results_notify(self, target, handler=None, timeout=None):
    self._dal.on_command(
        DevicesEnum.sensor,
        CommandsEnum.infrared_self_test_results_notify,
        target,
        handler,
        timeout,
        outputs=[
            Parameter(
                name='is_successful',
                data_type='bool',
                index=0,
                size=1
            ),
            Parameter(
                name='infrared_sensor_test_details_mask',
                data_type='uint32_t',
                index=1,
                size=1
            ),
        ],
    )
