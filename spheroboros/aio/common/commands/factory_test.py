#!/usr/bin/env python3
# This file is automatically generated!
# Source File:        0x1F-factory_testing.json
# Device ID:          0x1F
# Device Name:        factory_test
# Timestamp:          02/08/2019 @ 00:55:35.166528 (UTC)

from spheroboros.common.commands.factory_test import CommandsEnum
from spheroboros.common.devices import DevicesEnum
from spheroboros.common.parameter import Parameter


async def set_test_fixture_result(self, test_id, fixture_id, results, target, timeout=None):
    return await self._dal.send_command(
        DevicesEnum.factory_test,
        CommandsEnum.set_test_fixture_result,
        target,
        timeout,
        inputs=[
            Parameter(
                name='test_id',
                data_type='uint16_t',
                index=0,
                value=test_id,
                size=1
            ),
            Parameter(
                name='fixture_id',
                data_type='uint16_t',
                index=1,
                value=fixture_id,
                size=1
            ),
            Parameter(
                name='results',
                data_type='uint32_t',
                index=2,
                value=results,
                size=1
            ),
        ],
    )


async def get_test_fixture_result(self, test_id, target, timeout=None):
    return await self._dal.send_command(
        DevicesEnum.factory_test,
        CommandsEnum.get_test_fixture_result,
        target,
        timeout,
        inputs=[
            Parameter(
                name='test_id',
                data_type='uint16_t',
                index=0,
                value=test_id,
                size=1
            ),
        ],
        outputs=[
            Parameter(
                name='fixture_id',
                data_type='uint16_t',
                index=0,
                size=1,
            ),
            Parameter(
                name='results',
                data_type='uint32_t',
                index=1,
                size=1,
            ),
        ],
    )


async def get_factory_mode_challenge(self, target, timeout=None):
    return await self._dal.send_command(
        DevicesEnum.factory_test,
        CommandsEnum.get_factory_mode_challenge,
        target,
        timeout,
        outputs=[
            Parameter(
                name='security_challenge',
                data_type='uint32_t',
                index=0,
                size=1,
            ),
        ],
    )


async def enter_factory_mode(self, security_response, target, timeout=None):
    return await self._dal.send_command(
        DevicesEnum.factory_test,
        CommandsEnum.enter_factory_mode,
        target,
        timeout,
        inputs=[
            Parameter(
                name='security_response',
                data_type='uint32_t',
                index=0,
                value=security_response,
                size=1
            ),
        ],
    )


async def exit_factory_mode(self, target, timeout=None):
    return await self._dal.send_command(
        DevicesEnum.factory_test,
        CommandsEnum.exit_factory_mode,
        target,
        timeout,
    )


async def get_chassis_id(self, target, timeout=None):
    return await self._dal.send_command(
        DevicesEnum.factory_test,
        CommandsEnum.get_chassis_id,
        target,
        timeout,
        outputs=[
            Parameter(
                name='identifier',
                data_type='uint16_t',
                index=0,
                size=1,
            ),
        ],
    )


async def enable_extended_life_test(self, is_enabled, target, timeout=None):
    return await self._dal.send_command(
        DevicesEnum.factory_test,
        CommandsEnum.enable_extended_life_test,
        target,
        timeout,
        inputs=[
            Parameter(
                name='is_enabled',
                data_type='bool',
                index=0,
                value=is_enabled,
                size=1
            ),
        ],
    )


async def get_factory_mode_status(self, target, timeout=None):
    return await self._dal.send_command(
        DevicesEnum.factory_test,
        CommandsEnum.get_factory_mode_status,
        target,
        timeout,
        outputs=[
            Parameter(
                name='factory_status',
                data_type='bool',
                index=0,
                size=1,
            ),
        ],
    )
