#!/usr/bin/env python3
# This file is automatically generated!
# Source File:        0x1A-user_io.json
# Device ID:          0x1A
# Device Name:        io
# Timestamp:          09/09/2019 @ 17:37:24.158337 (UTC)

from sphero_sdk.common.enums.io_enums import CommandsEnum
from sphero_sdk.common.devices import DevicesEnum
from sphero_sdk.common.parameter import Parameter
from sphero_sdk.common.sequence_number_generator import SequenceNumberGenerator


def set_all_leds_with_32_bit_mask(led_group, led_brightness_values, target, timeout): 
    return { 
        'did': DevicesEnum.io,
        'cid': CommandsEnum.set_all_leds_with_32_bit_mask,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'inputs': [ 
            Parameter( 
                name='ledGroup',
                data_type='uint32_t',
                index=0,
                value=led_group,
                size=1
            ),
            Parameter( 
                name='ledBrightnessValues',
                data_type='uint8_t',
                index=1,
                value=led_brightness_values,
                size=32
            ),
        ],
    }


def set_compressed_frame_player_one_color(red, green, blue, target, timeout): 
    return { 
        'did': DevicesEnum.io,
        'cid': CommandsEnum.set_compressed_frame_player_one_color,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'inputs': [ 
            Parameter( 
                name='red',
                data_type='uint8_t',
                index=0,
                value=red,
                size=1
            ),
            Parameter( 
                name='green',
                data_type='uint8_t',
                index=1,
                value=green,
                size=1
            ),
            Parameter( 
                name='blue',
                data_type='uint8_t',
                index=2,
                value=blue,
                size=1
            ),
        ],
    }


def save_compressed_frame_player_animation(animation_index, speed_fps, is_fade_enabled, palette_color_count, palette_rgb_values, frame_count, frame_indexes, target, timeout): 
    return { 
        'did': DevicesEnum.io,
        'cid': CommandsEnum.save_compressed_frame_player_animation,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'inputs': [ 
            Parameter( 
                name='animationIndex',
                data_type='uint8_t',
                index=0,
                value=animation_index,
                size=1
            ),
            Parameter( 
                name='speedFps',
                data_type='uint8_t',
                index=1,
                value=speed_fps,
                size=1
            ),
            Parameter( 
                name='isFadeEnabled',
                data_type='bool',
                index=2,
                value=is_fade_enabled,
                size=1
            ),
            Parameter( 
                name='paletteColorCount',
                data_type='uint8_t',
                index=3,
                value=palette_color_count,
                size=1
            ),
            Parameter( 
                name='paletteRgbValues',
                data_type='uint8_t',
                index=4,
                value=palette_rgb_values,
                size=48
            ),
            Parameter( 
                name='frameCount',
                data_type='uint16_t',
                index=5,
                value=frame_count,
                size=1
            ),
            Parameter( 
                name='frameIndexes',
                data_type='uint16_t',
                index=6,
                value=frame_indexes,
                size=600
            ),
        ],
    }


def play_compressed_frame_player_animation(animation_index, target, timeout): 
    return { 
        'did': DevicesEnum.io,
        'cid': CommandsEnum.play_compressed_frame_player_animation,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'inputs': [ 
            Parameter( 
                name='animationIndex',
                data_type='uint8_t',
                index=0,
                value=animation_index,
                size=1
            ),
        ],
    }


def play_compressed_frame_player_frame(frame_index, target, timeout): 
    return { 
        'did': DevicesEnum.io,
        'cid': CommandsEnum.play_compressed_frame_player_frame,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'inputs': [ 
            Parameter( 
                name='frameIndex',
                data_type='uint16_t',
                index=0,
                value=frame_index,
                size=1
            ),
        ],
    }


def get_compressed_frame_player_list_of_frames(target, timeout): 
    return { 
        'did': DevicesEnum.io,
        'cid': CommandsEnum.get_compressed_frame_player_list_of_frames,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'outputs': [ 
            Parameter( 
                name='frameIndexes',
                data_type='uint16_t',
                index=0,
                size=1000,
            ),
        ]
    }


def delete_all_compressed_frame_player_animations_and_frames(target, timeout): 
    return { 
        'did': DevicesEnum.io,
        'cid': CommandsEnum.delete_all_compressed_frame_player_animations_and_frames,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
    }


def pause_compressed_frame_player_animation(target, timeout): 
    return { 
        'did': DevicesEnum.io,
        'cid': CommandsEnum.pause_compressed_frame_player_animation,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
    }


def resume_compressed_frame_player_animation(target, timeout): 
    return { 
        'did': DevicesEnum.io,
        'cid': CommandsEnum.resume_compressed_frame_player_animation,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
    }


def reset_compressed_frame_player_animation(target, timeout): 
    return { 
        'did': DevicesEnum.io,
        'cid': CommandsEnum.reset_compressed_frame_player_animation,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
    }


def on_compressed_frame_player_animation_complete_notify(target, timeout): 
    return { 
        'did': DevicesEnum.io,
        'cid': CommandsEnum.compressed_frame_player_animation_complete_notify,
        'target': target,
        'timeout': timeout,
        'outputs': [ 
            Parameter( 
                name='completeEvent',
                data_type='uint8_t',
                index=0,
                size=1,
            ),
        ]
    }


def assign_compressed_frame_player_frames_to_animation(animation_index, start_frame_index, frame_indices, target, timeout): 
    return { 
        'did': DevicesEnum.io,
        'cid': CommandsEnum.assign_compressed_frame_player_frames_to_animation,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'inputs': [ 
            Parameter( 
                name='animationIndex',
                data_type='uint8_t',
                index=0,
                value=animation_index,
                size=1
            ),
            Parameter( 
                name='startFrameIndex',
                data_type='uint16_t',
                index=1,
                value=start_frame_index,
                size=1
            ),
            Parameter( 
                name='frameIndices',
                data_type='uint16_t',
                index=2,
                value=frame_indices,
                size=150
            ),
        ],
    }


def save_compressed_frame_player_animation_without_frames(animation_index, speed_fps, is_fade_enabled, palette_color_count, palette_rgb_values, total_frame_count, target, timeout): 
    return { 
        'did': DevicesEnum.io,
        'cid': CommandsEnum.save_compressed_frame_player_animation_without_frames,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'inputs': [ 
            Parameter( 
                name='animationIndex',
                data_type='uint8_t',
                index=0,
                value=animation_index,
                size=1
            ),
            Parameter( 
                name='speedFps',
                data_type='uint8_t',
                index=1,
                value=speed_fps,
                size=1
            ),
            Parameter( 
                name='isFadeEnabled',
                data_type='bool',
                index=2,
                value=is_fade_enabled,
                size=1
            ),
            Parameter( 
                name='paletteColorCount',
                data_type='uint8_t',
                index=3,
                value=palette_color_count,
                size=1
            ),
            Parameter( 
                name='paletteRgbValues',
                data_type='uint8_t',
                index=4,
                value=palette_rgb_values,
                size=48
            ),
            Parameter( 
                name='totalFrameCount',
                data_type='uint16_t',
                index=5,
                value=total_frame_count,
                size=1
            ),
        ],
        'outputs': [ 
            Parameter( 
                name='savedAnimations',
                data_type='uint8_t',
                index=0,
                size=50,
            ),
        ]
    }


def play_compressed_frame_player_animation_with_loop_option(animation_index, is_looping, target, timeout): 
    return { 
        'did': DevicesEnum.io,
        'cid': CommandsEnum.play_compressed_frame_player_animation_with_loop_option,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'inputs': [ 
            Parameter( 
                name='animationIndex',
                data_type='uint8_t',
                index=0,
                value=animation_index,
                size=1
            ),
            Parameter( 
                name='isLooping',
                data_type='bool',
                index=1,
                value=is_looping,
                size=1
            ),
        ],
    }


def get_active_color_palette(target, timeout): 
    return { 
        'did': DevicesEnum.io,
        'cid': CommandsEnum.get_active_color_palette,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'outputs': [ 
            Parameter( 
                name='rgbIndexBytes',
                data_type='uint8_t',
                index=0,
                size=48,
            ),
        ]
    }


def set_active_color_palette(rgb_index_bytes, target, timeout): 
    return { 
        'did': DevicesEnum.io,
        'cid': CommandsEnum.set_active_color_palette,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'inputs': [ 
            Parameter( 
                name='rgbIndexBytes',
                data_type='uint8_t',
                index=0,
                value=rgb_index_bytes,
                size=48
            ),
        ],
    }


def get_color_identification_report(red, green, blue, confidence_threshold, target, timeout): 
    return { 
        'did': DevicesEnum.io,
        'cid': CommandsEnum.get_color_identification_report,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'inputs': [ 
            Parameter( 
                name='red',
                data_type='uint8_t',
                index=0,
                value=red,
                size=1
            ),
            Parameter( 
                name='green',
                data_type='uint8_t',
                index=1,
                value=green,
                size=1
            ),
            Parameter( 
                name='blue',
                data_type='uint8_t',
                index=2,
                value=blue,
                size=1
            ),
            Parameter( 
                name='confidenceThreshold',
                data_type='uint8_t',
                index=3,
                value=confidence_threshold,
                size=1
            ),
        ],
        'outputs': [ 
            Parameter( 
                name='indexConfidenceByte',
                data_type='uint8_t',
                index=0,
                size=24,
            ),
        ]
    }


def load_color_palette(palette_index, target, timeout): 
    return { 
        'did': DevicesEnum.io,
        'cid': CommandsEnum.load_color_palette,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'inputs': [ 
            Parameter( 
                name='paletteIndex',
                data_type='uint8_t',
                index=0,
                value=palette_index,
                size=1
            ),
        ],
    }


def save_color_palette(palette_index, target, timeout): 
    return { 
        'did': DevicesEnum.io,
        'cid': CommandsEnum.save_color_palette,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'inputs': [ 
            Parameter( 
                name='paletteIndex',
                data_type='uint8_t',
                index=0,
                value=palette_index,
                size=1
            ),
        ],
    }


def get_compressed_frame_player_frame_info_type(target, timeout): 
    return { 
        'did': DevicesEnum.io,
        'cid': CommandsEnum.get_compressed_frame_player_frame_info_type,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'outputs': [ 
            Parameter( 
                name='frameInfoType',
                data_type='uint8_t',
                index=0,
                size=1,
            ),
        ]
    }


def save_compressed_frame_player_16_bit_frame(frame_index, color_index_bit_0, color_index_bit_1, color_index_bit_2, color_index_bit_3, target, timeout): 
    return { 
        'did': DevicesEnum.io,
        'cid': CommandsEnum.save_compressed_frame_player_16_bit_frame,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'inputs': [ 
            Parameter( 
                name='frameIndex',
                data_type='uint16_t',
                index=0,
                value=frame_index,
                size=1
            ),
            Parameter( 
                name='colorIndexBit0',
                data_type='uint16_t',
                index=1,
                value=color_index_bit_0,
                size=1
            ),
            Parameter( 
                name='colorIndexBit1',
                data_type='uint16_t',
                index=2,
                value=color_index_bit_1,
                size=1
            ),
            Parameter( 
                name='colorIndexBit2',
                data_type='uint16_t',
                index=3,
                value=color_index_bit_2,
                size=1
            ),
            Parameter( 
                name='colorIndexBit3',
                data_type='uint16_t',
                index=4,
                value=color_index_bit_3,
                size=1
            ),
        ],
    }


def release_led_requests(target, timeout): 
    return { 
        'did': DevicesEnum.io,
        'cid': CommandsEnum.release_led_requests,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
    }
