#!/usr/bin/env python3
# This file is automatically generated!
# Source File:        0x18-sensors.json
# Device ID:          0x18
# Device Name:        sensor
# Timestamp:          08/22/2019 @ 20:06:31.332175 (UTC)

from sphero_sdk.common.enums.sensor_enums import CommandsEnum
from sphero_sdk.common.devices import DevicesEnum
from sphero_sdk.common.parameter import Parameter
from sphero_sdk.common.sequence_number_generator import SequenceNumberGenerator


def enable_gyro_max_notify(is_enabled, target, timeout): 
    return { 
        'did': DevicesEnum.sensor,
        'cid': CommandsEnum.enable_gyro_max_notify,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'inputs': [ 
            Parameter( 
                name='isEnabled',
                data_type='bool',
                index=0,
                value=is_enabled,
                size=1
            ),
        ],
    }


def on_gyro_max_notify(target, timeout): 
    return { 
        'did': DevicesEnum.sensor,
        'cid': CommandsEnum.gyro_max_notify,
        'target': target,
        'timeout': timeout,
        'outputs': [ 
            Parameter( 
                name='flags',
                data_type='uint8_t',
                index=0,
                size=1,
            ),
        ]
    }


def configure_collision_detection(method, x_threshold, x_speed, y_threshold, y_speed, dead_time, target, timeout): 
    return { 
        'did': DevicesEnum.sensor,
        'cid': CommandsEnum.configure_collision_detection,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'inputs': [ 
            Parameter( 
                name='method',
                data_type='uint8_t',
                index=0,
                value=method,
                size=1
            ),
            Parameter( 
                name='xThreshold',
                data_type='uint8_t',
                index=1,
                value=x_threshold,
                size=1
            ),
            Parameter( 
                name='xSpeed',
                data_type='uint8_t',
                index=2,
                value=x_speed,
                size=1
            ),
            Parameter( 
                name='yThreshold',
                data_type='uint8_t',
                index=3,
                value=y_threshold,
                size=1
            ),
            Parameter( 
                name='ySpeed',
                data_type='uint8_t',
                index=4,
                value=y_speed,
                size=1
            ),
            Parameter( 
                name='deadTime',
                data_type='uint8_t',
                index=5,
                value=dead_time,
                size=1
            ),
        ],
    }


def on_collision_detected_notify(target, timeout): 
    return { 
        'did': DevicesEnum.sensor,
        'cid': CommandsEnum.collision_detected_notify,
        'target': target,
        'timeout': timeout,
        'outputs': [ 
            Parameter( 
                name='accelerationX',
                data_type='uint16_t',
                index=0,
                size=1,
            ),
            Parameter( 
                name='accelerationY',
                data_type='uint16_t',
                index=1,
                size=1,
            ),
            Parameter( 
                name='accelerationZ',
                data_type='uint16_t',
                index=2,
                size=1,
            ),
            Parameter( 
                name='axis',
                data_type='uint8_t',
                index=3,
                size=1,
            ),
            Parameter( 
                name='powerX',
                data_type='uint16_t',
                index=4,
                size=1,
            ),
            Parameter( 
                name='powerY',
                data_type='uint16_t',
                index=5,
                size=1,
            ),
            Parameter( 
                name='speed',
                data_type='uint8_t',
                index=6,
                size=1,
            ),
            Parameter( 
                name='time',
                data_type='uint32_t',
                index=7,
                size=1,
            ),
        ]
    }


def reset_locator_x_and_y(target, timeout): 
    return { 
        'did': DevicesEnum.sensor,
        'cid': CommandsEnum.reset_locator_x_and_y,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
    }


def set_locator_flags(flags, target, timeout): 
    return { 
        'did': DevicesEnum.sensor,
        'cid': CommandsEnum.set_locator_flags,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'inputs': [ 
            Parameter( 
                name='flags',
                data_type='uint8_t',
                index=0,
                value=flags,
                size=1
            ),
        ],
    }


def get_bot_to_bot_infrared_readings(target, timeout): 
    return { 
        'did': DevicesEnum.sensor,
        'cid': CommandsEnum.get_bot_to_bot_infrared_readings,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'outputs': [ 
            Parameter( 
                name='sensorData',
                data_type='uint32_t',
                index=0,
                size=1,
            ),
        ]
    }


def get_rgbc_sensor_values(target, timeout): 
    return { 
        'did': DevicesEnum.sensor,
        'cid': CommandsEnum.get_rgbc_sensor_values,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'outputs': [ 
            Parameter( 
                name='redChannelValue',
                data_type='uint16_t',
                index=0,
                size=1,
            ),
            Parameter( 
                name='greenChannelValue',
                data_type='uint16_t',
                index=1,
                size=1,
            ),
            Parameter( 
                name='blueChannelValue',
                data_type='uint16_t',
                index=2,
                size=1,
            ),
            Parameter( 
                name='clearChannelValue',
                data_type='uint16_t',
                index=3,
                size=1,
            ),
        ]
    }


def magnetometer_calibrate_to_north(target, timeout): 
    return { 
        'did': DevicesEnum.sensor,
        'cid': CommandsEnum.magnetometer_calibrate_to_north,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
    }


def on_magnetometer_north_yaw_notify(target, timeout): 
    return { 
        'did': DevicesEnum.sensor,
        'cid': CommandsEnum.magnetometer_north_yaw_notify,
        'target': target,
        'timeout': timeout,
        'outputs': [ 
            Parameter( 
                name='yawDirection',
                data_type='uint16_t',
                index=0,
                size=1,
            ),
        ]
    }


def start_robot_to_robot_infrared_broadcasting(far_code, near_code, target, timeout): 
    return { 
        'did': DevicesEnum.sensor,
        'cid': CommandsEnum.start_robot_to_robot_infrared_broadcasting,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'inputs': [ 
            Parameter( 
                name='farCode',
                data_type='uint8_t',
                index=0,
                value=far_code,
                size=1
            ),
            Parameter( 
                name='nearCode',
                data_type='uint8_t',
                index=1,
                value=near_code,
                size=1
            ),
        ],
    }


def start_robot_to_robot_infrared_following(far_code, near_code, target, timeout): 
    return { 
        'did': DevicesEnum.sensor,
        'cid': CommandsEnum.start_robot_to_robot_infrared_following,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'inputs': [ 
            Parameter( 
                name='farCode',
                data_type='uint8_t',
                index=0,
                value=far_code,
                size=1
            ),
            Parameter( 
                name='nearCode',
                data_type='uint8_t',
                index=1,
                value=near_code,
                size=1
            ),
        ],
    }


def stop_robot_to_robot_infrared_broadcasting(target, timeout): 
    return { 
        'did': DevicesEnum.sensor,
        'cid': CommandsEnum.stop_robot_to_robot_infrared_broadcasting,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
    }


def on_robot_to_robot_infrared_message_received_notify(target, timeout): 
    return { 
        'did': DevicesEnum.sensor,
        'cid': CommandsEnum.robot_to_robot_infrared_message_received_notify,
        'target': target,
        'timeout': timeout,
        'outputs': [ 
            Parameter( 
                name='infraredCode',
                data_type='uint8_t',
                index=0,
                size=1,
            ),
        ]
    }


def get_ambient_light_sensor_value(target, timeout): 
    return { 
        'did': DevicesEnum.sensor,
        'cid': CommandsEnum.get_ambient_light_sensor_value,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'outputs': [ 
            Parameter( 
                name='ambientLightValue',
                data_type='float',
                index=0,
                size=1,
            ),
        ]
    }


def stop_robot_to_robot_infrared_following(target, timeout): 
    return { 
        'did': DevicesEnum.sensor,
        'cid': CommandsEnum.stop_robot_to_robot_infrared_following,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
    }


def start_robot_to_robot_infrared_evading(far_code, near_code, target, timeout): 
    return { 
        'did': DevicesEnum.sensor,
        'cid': CommandsEnum.start_robot_to_robot_infrared_evading,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'inputs': [ 
            Parameter( 
                name='farCode',
                data_type='uint8_t',
                index=0,
                value=far_code,
                size=1
            ),
            Parameter( 
                name='nearCode',
                data_type='uint8_t',
                index=1,
                value=near_code,
                size=1
            ),
        ],
    }


def stop_robot_to_robot_infrared_evading(target, timeout): 
    return { 
        'did': DevicesEnum.sensor,
        'cid': CommandsEnum.stop_robot_to_robot_infrared_evading,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
    }


def enable_color_detection_notify(is_enabled, interval, minimum_confidence_threshold, target, timeout): 
    return { 
        'did': DevicesEnum.sensor,
        'cid': CommandsEnum.enable_color_detection_notify,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'inputs': [ 
            Parameter( 
                name='isEnabled',
                data_type='bool',
                index=0,
                value=is_enabled,
                size=1
            ),
            Parameter( 
                name='interval',
                data_type='uint16_t',
                index=1,
                value=interval,
                size=1
            ),
            Parameter( 
                name='minimumConfidenceThreshold',
                data_type='uint8_t',
                index=2,
                value=minimum_confidence_threshold,
                size=1
            ),
        ],
    }


def on_color_detection_notify(target, timeout): 
    return { 
        'did': DevicesEnum.sensor,
        'cid': CommandsEnum.color_detection_notify,
        'target': target,
        'timeout': timeout,
        'outputs': [ 
            Parameter( 
                name='red',
                data_type='uint8_t',
                index=0,
                size=1,
            ),
            Parameter( 
                name='green',
                data_type='uint8_t',
                index=1,
                size=1,
            ),
            Parameter( 
                name='blue',
                data_type='uint8_t',
                index=2,
                size=1,
            ),
            Parameter( 
                name='confidence',
                data_type='uint8_t',
                index=3,
                size=1,
            ),
            Parameter( 
                name='colorClassificationId',
                data_type='uint8_t',
                index=4,
                size=1,
            ),
        ]
    }


def get_current_detected_color_reading(target, timeout): 
    return { 
        'did': DevicesEnum.sensor,
        'cid': CommandsEnum.get_current_detected_color_reading,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
    }


def enable_color_detection(is_enabled, target, timeout): 
    return { 
        'did': DevicesEnum.sensor,
        'cid': CommandsEnum.enable_color_detection,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'inputs': [ 
            Parameter( 
                name='isEnabled',
                data_type='bool',
                index=0,
                value=is_enabled,
                size=1
            ),
        ],
    }


def enable_robot_infrared_message_notify(is_enabled, target, timeout): 
    return { 
        'did': DevicesEnum.sensor,
        'cid': CommandsEnum.enable_robot_infrared_message_notify,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'inputs': [ 
            Parameter( 
                name='isEnabled',
                data_type='bool',
                index=0,
                value=is_enabled,
                size=1
            ),
        ],
    }


def send_infrared_message(infrared_code, front_strength, left_strength, right_strength, rear_strength, target, timeout): 
    return { 
        'did': DevicesEnum.sensor,
        'cid': CommandsEnum.send_infrared_message,
        'seq': SequenceNumberGenerator.get_sequence_number(),
        'target': target,
        'timeout': timeout,
        'inputs': [ 
            Parameter( 
                name='infraredCode',
                data_type='uint8_t',
                index=0,
                value=infrared_code,
                size=1
            ),
            Parameter( 
                name='frontStrength',
                data_type='uint8_t',
                index=1,
                value=front_strength,
                size=1
            ),
            Parameter( 
                name='leftStrength',
                data_type='uint8_t',
                index=2,
                value=left_strength,
                size=1
            ),
            Parameter( 
                name='rightStrength',
                data_type='uint8_t',
                index=3,
                value=right_strength,
                size=1
            ),
            Parameter( 
                name='rearStrength',
                data_type='uint8_t',
                index=4,
                value=rear_strength,
                size=1
            ),
        ],
    }
