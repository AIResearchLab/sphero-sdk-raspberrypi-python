#!/usr/bin/env python3
# This file is automatically generated!
# Toy Name:           Sphero RVR
# Command Count:      87
# Timestamp:          01/24/2019 @ 20:44:23.066284 (UTC)

import pytest
import asyncio


@pytest.mark.asyncio
async def test_sphero_rvr_echo(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.echo(
        data=random_list('uint8_t', 16),
        target=1,
    )
    assert len(response) == 1
    assert isinstance(response[0][0], int)


@pytest.mark.asyncio
async def test_sphero_rvr_get_api_protocol_version(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_api_protocol_version(
        target=1,
    )
    assert len(response) == 2
    assert isinstance(response[0], int)
    assert isinstance(response[1], int)


@pytest.mark.asyncio
async def test_sphero_rvr_send_command_to_shell(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.send_command_to_shell(
        shell_command_string=random_value('std::string'),
        target=1,
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_send_string_to_console(async_mock_sphero_rvr):
    handler_called = False
    asserts_passed = False

    async def handler(console_string):
        nonlocal handler_called
        nonlocal asserts_passed
        asserts_passed |= isinstance(console_string, str)
        handler_called = True

    await async_mock_sphero_rvr.on_send_string_to_console(
        handler=handler,
        target=1,
    )

    while not handler_called:
        await asyncio.sleep(0)

    assert asserts_passed


@pytest.mark.asyncio
async def test_sphero_rvr_get_supported_dids(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_supported_dids(
        target=1,
    )
    assert len(response) == 1
    assert isinstance(response[0][0], int)


@pytest.mark.asyncio
async def test_sphero_rvr_get_supported_cids(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_supported_cids(
        did=random_value('uint8_t'),
        target=1,
    )
    assert len(response) == 1
    assert isinstance(response[0][0], int)


@pytest.mark.asyncio
async def test_sphero_rvr_get_main_application_version(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_main_application_version(
        target=1,
    )
    assert len(response) == 3
    assert isinstance(response[0], int)
    assert isinstance(response[1], int)
    assert isinstance(response[2], int)


@pytest.mark.asyncio
async def test_sphero_rvr_get_bootloader_version(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_bootloader_version(
        target=1,
    )
    assert len(response) == 3
    assert isinstance(response[0], int)
    assert isinstance(response[1], int)
    assert isinstance(response[2], int)


@pytest.mark.asyncio
async def test_sphero_rvr_get_board_revision(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_board_revision(
        target=1,
    )
    assert len(response) == 1
    assert isinstance(response[0], int)


@pytest.mark.asyncio
async def test_sphero_rvr_get_mac_address(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_mac_address(
    )
    assert len(response) == 1
    assert isinstance(response[0], str)


@pytest.mark.asyncio
async def test_sphero_rvr_get_nordic_temperature(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_nordic_temperature(
    )
    assert len(response) == 1
    assert isinstance(response[0][0], int)


@pytest.mark.asyncio
async def test_sphero_rvr_application_ready_notify(async_mock_sphero_rvr):
    handler_called = False
    asserts_passed = False

    async def handler(application_index):
        nonlocal handler_called
        nonlocal asserts_passed
        asserts_passed |= isinstance(application_index, int)
        handler_called = True

    await async_mock_sphero_rvr.on_application_ready_notify(
        handler=handler,
    )

    while not handler_called:
        await asyncio.sleep(0)

    assert asserts_passed


@pytest.mark.asyncio
async def test_sphero_rvr_get_stats_id(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_stats_id(
        target=1,
    )
    assert len(response) == 1
    assert isinstance(response[0], int)


@pytest.mark.asyncio
async def test_sphero_rvr_application_alive_notify(async_mock_sphero_rvr):
    handler_called = False
    asserts_passed = False

    async def handler(application_index):
        nonlocal handler_called
        nonlocal asserts_passed
        asserts_passed |= isinstance(application_index, int)
        handler_called = True

    await async_mock_sphero_rvr.on_application_alive_notify(
        handler=handler,
    )

    while not handler_called:
        await asyncio.sleep(0)

    assert asserts_passed


@pytest.mark.asyncio
async def test_sphero_rvr_get_processor_name(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_processor_name(
        target=1,
    )
    assert len(response) == 1
    assert isinstance(response[0], str)


@pytest.mark.asyncio
async def test_sphero_rvr_get_boot_reason(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_boot_reason(
    )
    assert len(response) == 1
    assert isinstance(response[0], int)


@pytest.mark.asyncio
async def test_sphero_rvr_get_last_error_info(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_last_error_info(
    )
    assert len(response) == 3
    assert isinstance(response[0][0], int)
    assert isinstance(response[1], int)
    assert isinstance(response[2][0], int)


@pytest.mark.asyncio
async def test_sphero_rvr_request_l1_diagnostics(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.request_l1_diagnostics(
        target=1,
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_write_config_block(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.write_config_block(
        target=1,
    )
    assert len(response) == 1
    assert isinstance(response[0], bool)


@pytest.mark.asyncio
async def test_sphero_rvr_get_config_block(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_config_block(
        target=1,
    )
    assert len(response) == 3
    assert isinstance(response[0], int)
    assert isinstance(response[1], int)
    assert isinstance(response[2][0], int)


@pytest.mark.asyncio
async def test_sphero_rvr_set_config_block(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.set_config_block(
        meta_data_version=random_value('uint32_t'),
        config_block_version=random_value('uint32_t'),
        application_data=random_list('uint8_t', 255),
        target=1,
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_erase_config_block(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.erase_config_block(
        magic_safety_number=random_value('uint32_t'),
        target=1,
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_get_swd_locking_status(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_swd_locking_status(
        target=1,
    )
    assert len(response) == 1
    assert isinstance(response[0], bool)


@pytest.mark.asyncio
async def test_sphero_rvr_set_swd_locking(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.set_swd_locking(
        is_locked=random_value('bool'),
        unlocking_key=random_value('uint32_t'),
        target=1,
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_get_manufacturing_date(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_manufacturing_date(
        target=1,
    )
    assert len(response) == 3
    assert isinstance(response[0], int)
    assert isinstance(response[1], int)
    assert isinstance(response[2], int)


@pytest.mark.asyncio
async def test_sphero_rvr_set_manufacturing_date(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.set_manufacturing_date(
        year=random_value('uint16_t'),
        month=random_value('uint8_t'),
        day=random_value('uint8_t'),
        target=1,
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_set_sku(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.set_sku(
        sku=random_value('std::string'),
        target=1,
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_get_sku(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_sku(
        target=1,
    )
    assert len(response) == 1
    assert isinstance(response[0], str)


@pytest.mark.asyncio
async def test_sphero_rvr_enable_play_mode_change_notify(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.enable_play_mode_change_notify(
    )
    assert len(response) == 1
    assert isinstance(response[0], int)


@pytest.mark.asyncio
async def test_sphero_rvr_set_play_mode(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.set_play_mode(
        identifier=random_value('uint16_t'),
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_get_play_mode(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_play_mode(
    )
    assert len(response) == 1
    assert isinstance(response[0], int)


@pytest.mark.asyncio
async def test_sphero_rvr_enter_deep_sleep(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.enter_deep_sleep(
        seconds_until_deep_sleep=random_value('uint8_t'),
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_enter_soft_sleep(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.enter_soft_sleep(
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_prepare_for_shutdown(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.prepare_for_shutdown(
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_ready_for_shutdown_notify(async_mock_sphero_rvr):
    handler_called = False
    asserts_passed = False

    async def handler():
        nonlocal handler_called
        nonlocal asserts_passed
        asserts_passed = True
        handler_called = True

    await async_mock_sphero_rvr.on_ready_for_shutdown_notify(
        handler=handler,
    )

    while not handler_called:
        await asyncio.sleep(0)

    assert asserts_passed


@pytest.mark.asyncio
async def test_sphero_rvr_force_battery_refresh(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.force_battery_refresh(
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_wake(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.wake(
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_get_battery_percentage(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_battery_percentage(
    )
    assert len(response) == 1
    assert isinstance(response[0], int)


@pytest.mark.asyncio
async def test_sphero_rvr_get_battery_voltage_state(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_battery_voltage_state(
    )
    assert len(response) == 1
    assert isinstance(response[0], int)


@pytest.mark.asyncio
async def test_sphero_rvr_will_sleep_notify(async_mock_sphero_rvr):
    handler_called = False
    asserts_passed = False

    async def handler():
        nonlocal handler_called
        nonlocal asserts_passed
        asserts_passed = True
        handler_called = True

    await async_mock_sphero_rvr.on_will_sleep_notify(
        handler=handler,
    )

    while not handler_called:
        await asyncio.sleep(0)

    assert asserts_passed


@pytest.mark.asyncio
async def test_sphero_rvr_did_sleep_notify(async_mock_sphero_rvr):
    handler_called = False
    asserts_passed = False

    async def handler():
        nonlocal handler_called
        nonlocal asserts_passed
        asserts_passed = True
        handler_called = True

    await async_mock_sphero_rvr.on_did_sleep_notify(
        handler=handler,
    )

    while not handler_called:
        await asyncio.sleep(0)

    assert asserts_passed


@pytest.mark.asyncio
async def test_sphero_rvr_enable_battery_voltage_state_change_notify(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.enable_battery_voltage_state_change_notify(
        is_enabled=random_value('bool'),
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_battery_voltage_state_change_notify(async_mock_sphero_rvr):
    handler_called = False
    asserts_passed = False

    async def handler(state):
        nonlocal handler_called
        nonlocal asserts_passed
        asserts_passed |= isinstance(state, int)
        handler_called = True

    await async_mock_sphero_rvr.on_battery_voltage_state_change_notify(
        handler=handler,
    )

    while not handler_called:
        await asyncio.sleep(0)

    assert asserts_passed


@pytest.mark.asyncio
async def test_sphero_rvr_raw_motors(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.raw_motors(
        left_mode=random_value('uint8_t'),
        left_speed=random_value('uint8_t'),
        right_mode=random_value('uint8_t'),
        right_speed=random_value('uint8_t'),
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_reset_yaw(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.reset_yaw(
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_drive_with_heading(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.drive_with_heading(
        speed=random_value('uint8_t'),
        heading=random_value('int16_t'),
        flags=random_value('uint8_t'),
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_tank_drive(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.tank_drive(
        left_speed=random_value('uint8_t'),
        right_speed=random_value('uint8_t'),
        flags=random_value('uint8_t'),
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_rc_drive(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.rc_drive(
        speed=random_value('uint8_t'),
        turn_rate=random_value('uint8_t'),
        flags=random_value('uint8_t'),
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_set_stabilization(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.set_stabilization(
        index=random_value('uint8_t'),
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_set_sensor_streaming_mask(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.set_sensor_streaming_mask(
        interval=random_value('uint16_t'),
        packet_count=random_value('uint8_t'),
        data_mask=random_value('uint32_t'),
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_get_sensor_streaming_mask(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_sensor_streaming_mask(
    )
    assert len(response) == 3
    assert isinstance(response[0], int)
    assert isinstance(response[1], int)
    assert isinstance(response[2], int)


@pytest.mark.asyncio
async def test_sphero_rvr_sensor_streaming_data_notify(async_mock_sphero_rvr):
    handler_called = False
    asserts_passed = False

    async def handler(sensor_data):
        nonlocal handler_called
        nonlocal asserts_passed
        asserts_passed |= isinstance(sensor_data, list)
        asserts_passed |= isinstance(sensor_data[0], float)
        handler_called = True

    await async_mock_sphero_rvr.on_sensor_streaming_data_notify(
        handler=handler,
    )

    while not handler_called:
        await asyncio.sleep(0)

    assert asserts_passed


@pytest.mark.asyncio
async def test_sphero_rvr_get_encoder_counts(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_encoder_counts(
    )
    assert len(response) == 1
    assert isinstance(response[0][0], int)


@pytest.mark.asyncio
async def test_sphero_rvr_get_euler_angles(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_euler_angles(
    )
    assert len(response) == 4
    assert isinstance(response[0], float)
    assert isinstance(response[1], float)
    assert isinstance(response[2], float)
    assert isinstance(response[3], float)


@pytest.mark.asyncio
async def test_sphero_rvr_get_gyro_degrees_per_second(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_gyro_degrees_per_second(
    )
    assert len(response) == 3
    assert isinstance(response[0], float)
    assert isinstance(response[1], float)
    assert isinstance(response[2], float)


@pytest.mark.asyncio
async def test_sphero_rvr_set_extended_sensor_streaming_mask(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.set_extended_sensor_streaming_mask(
        data_mask=random_value('uint32_t'),
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_get_extended_sensor_streaming_mask(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_extended_sensor_streaming_mask(
    )
    assert len(response) == 1
    assert isinstance(response[0], int)


@pytest.mark.asyncio
async def test_sphero_rvr_get_rightsideupness(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_rightsideupness(
    )
    assert len(response) == 1
    assert isinstance(response[0], int)


@pytest.mark.asyncio
async def test_sphero_rvr_enable_gyro_max_notify(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.enable_gyro_max_notify(
        is_enabled=random_value('bool'),
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_gyro_max_notify(async_mock_sphero_rvr):
    handler_called = False
    asserts_passed = False

    async def handler(flags):
        nonlocal handler_called
        nonlocal asserts_passed
        asserts_passed |= isinstance(flags, int)
        handler_called = True

    await async_mock_sphero_rvr.on_gyro_max_notify(
        handler=handler,
    )

    while not handler_called:
        await asyncio.sleep(0)

    assert asserts_passed


@pytest.mark.asyncio
async def test_sphero_rvr_get_bot_to_bot_infrared_readings(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_bot_to_bot_infrared_readings(
    )
    assert len(response) == 1
    assert isinstance(response[0], int)


@pytest.mark.asyncio
async def test_sphero_rvr_magnetometer_calibrate_to_north(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.magnetometer_calibrate_to_north(
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_magnetometer_north_yaw_notify(async_mock_sphero_rvr):
    handler_called = False
    asserts_passed = False

    async def handler(yaw_direction):
        nonlocal handler_called
        nonlocal asserts_passed
        asserts_passed |= isinstance(yaw_direction, int)
        handler_called = True

    await async_mock_sphero_rvr.on_magnetometer_north_yaw_notify(
        handler=handler,
    )

    while not handler_called:
        await asyncio.sleep(0)

    assert asserts_passed


@pytest.mark.asyncio
async def test_sphero_rvr_start_robot_to_robot_infrared_broadcasting(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.start_robot_to_robot_infrared_broadcasting(
        far_code=random_value('uint8_t'),
        near_code=random_value('uint8_t'),
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_start_robot_to_robot_infrared_following(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.start_robot_to_robot_infrared_following(
        far_code=random_value('uint8_t'),
        near_code=random_value('uint8_t'),
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_stop_robot_to_robot_infrared_broadcasting(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.stop_robot_to_robot_infrared_broadcasting(
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_send_robot_to_robot_infrared_message(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.send_robot_to_robot_infrared_message(
        infrared_code=random_value('uint8_t'),
        front_left_strength=random_value('uint8_t'),
        front_right_strength=random_value('uint8_t'),
        back_right_strength=random_value('uint8_t'),
        back_left_strength=random_value('uint8_t'),
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_listen_for_robot_to_robot_infrared_message(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.listen_for_robot_to_robot_infrared_message(
        infrared_code=random_value('uint8_t'),
        listen_duration=random_value('uint32_t'),
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_robot_to_robot_infrared_message_received_notify(async_mock_sphero_rvr):
    handler_called = False
    asserts_passed = False

    async def handler(infrared_code):
        nonlocal handler_called
        nonlocal asserts_passed
        asserts_passed |= isinstance(infrared_code, int)
        handler_called = True

    await async_mock_sphero_rvr.on_robot_to_robot_infrared_message_received_notify(
        handler=handler,
    )

    while not handler_called:
        await asyncio.sleep(0)

    assert asserts_passed


@pytest.mark.asyncio
async def test_sphero_rvr_get_magnetometer_chip_id(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_magnetometer_chip_id(
    )
    assert len(response) == 1
    assert isinstance(response[0], int)


@pytest.mark.asyncio
async def test_sphero_rvr_run_infrared_self_test(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.run_infrared_self_test(
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_infrared_self_test_results_notify(async_mock_sphero_rvr):
    handler_called = False
    asserts_passed = False

    async def handler(is_successful, infrared_sensor_test_details_mask):
        nonlocal handler_called
        nonlocal asserts_passed
        asserts_passed |= isinstance(is_successful, bool)
        asserts_passed |= isinstance(infrared_sensor_test_details_mask, int)
        handler_called = True

    await async_mock_sphero_rvr.on_infrared_self_test_results_notify(
        handler=handler,
    )

    while not handler_called:
        await asyncio.sleep(0)

    assert asserts_passed


@pytest.mark.asyncio
async def test_sphero_rvr_set_bluetooth_device_name(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.set_bluetooth_device_name(
        name=random_value('std::string'),
        target=1,
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_get_bluetooth_device_name(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_bluetooth_device_name(
        target=1,
    )
    assert len(response) == 1
    assert isinstance(response[0], str)


@pytest.mark.asyncio
async def test_sphero_rvr_set_all_leds(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.set_all_leds(
        led_group=random_value('uint16_t'),
        led_brightness_values=random_list('uint8_t', 16),
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_set_all_leds_with_32_bit_mask(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.set_all_leds_with_32_bit_mask(
        led_group=random_value('uint32_t'),
        led_brightness_values=random_list('uint8_t', 32),
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_set_all_leds_with_64_bit_mask(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.set_all_leds_with_64_bit_mask(
        led_group=random_value('uint64_t'),
        led_brightness_values=random_list('uint8_t', 64),
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_set_all_leds_with_8_bit_mask(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.set_all_leds_with_8_bit_mask(
        led_group=random_value('uint8_t'),
        led_brightness_values=random_list('uint8_t', 8),
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_jump_to_bootloader(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.jump_to_bootloader(
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_set_test_fixture_result(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.set_test_fixture_result(
        test_id=random_value('uint16_t'),
        fixture_id=random_value('uint16_t'),
        results=random_value('uint32_t'),
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_get_test_fixture_result(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_test_fixture_result(
        test_id=random_value('uint16_t'),
    )
    assert len(response) == 2
    assert isinstance(response[0], int)
    assert isinstance(response[1], int)


@pytest.mark.asyncio
async def test_sphero_rvr_get_factory_mode_challenge(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_factory_mode_challenge(
        target=1,
    )
    assert len(response) == 1
    assert isinstance(response[0], int)


@pytest.mark.asyncio
async def test_sphero_rvr_enter_factory_mode(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.enter_factory_mode(
        security_response=random_value('uint32_t'),
        target=1,
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_exit_factory_mode(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.exit_factory_mode(
        target=1,
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_get_chassis_id(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_chassis_id(
        target=1,
    )
    assert len(response) == 1
    assert isinstance(response[0], int)


@pytest.mark.asyncio
async def test_sphero_rvr_enable_extended_life_test(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.enable_extended_life_test(
        is_enabled=random_value('bool'),
    )
    assert len(response) == 0


@pytest.mark.asyncio
async def test_sphero_rvr_get_factory_mode_status(async_mock_sphero_rvr, random_value, random_list):
    response = await async_mock_sphero_rvr.get_factory_mode_status(
        target=1,
    )
    assert len(response) == 1
    assert isinstance(response[0], bool)
